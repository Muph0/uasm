


symbol reg[3] = acc:0 | imm | r2 | r3 |
    r4 | src | dst | sp

---------------------------------------
-- MOVE
mnem    mov acc, $rs:reg    -> 00 000 $rs
mnem    mov $rd:reg, acc    -> 00 001 $rs
mnem    swap acc, $r:reg    -> 00 010 $r
mnem                        -> 00 011 $rd

mnem    load  $rs:reg       -> 00 100 $rs
mnem    store $rd:reg       -> 00 101 $rd
mnem    pop   $rs:reg       -> 00 110 $rs
mnem    push  $rd:reg       -> 00 111 $rd

----------------------------------------
-- IMMEDIATE
mnem    li $imm:int(-64:63) -> 01 $imm[5:0]
----------------------------------------
-- ALU
mnem    and   $rs:reg  -> 10 000 $rs
mnem    or    $rs:reg  -> 10 001 $rs
mnem    add   $rs:reg  -> 10 010 $rs
mnem    sub   $rs:reg  -> 10 011 $rs

mnem    xor   $rs:reg  -> 10 100 $rs
mnem    crry  $rd:reg  -> 10 101 $rd
mnem    mul   $rd:reg  -> 10 110 $rd
mnem    flip  $rs:reg  -> 10 111 $rs
----------------------------------------
-- BRANCHES
mnem    brz   $rs:reg  -> 11 000 $rs
mnem    bnz   $rs:reg  -> 11 001 $rs
mnem    blt   $rs:reg  -> 11 010 $rs
mnem    bge   $rs:reg  -> 11 011 $rs
mnem    ble   $rs:reg  -> 11 100 $rd
mnem    bgt   $rs:reg  -> 11 101 $rd

mnem                   -> 11 110 000
...
mnem                   -> 11 110 111

mnem    fwd            -> 11 111 000  -- src++; dst++
mnem    bwd            -> 11 111 001  -- src--; dst++
mnem    not acc        -> 11 111 010
mnem    dec acc        -> 11 111 011
mnem    mov sp, fp     -> 11 111 100
mnem    mov fp, sp     -> 11 111 101
mnem    mov acc, ip    -> 11 111 110
mnem    mov ip, acc    -> 11 111 111 (jmp)


--- data select
000 ALU
001
010 ip lo
011 ip hi
100 sp lo
101 sp hi